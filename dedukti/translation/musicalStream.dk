TYPE__Maybe : (A : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> Type.
Maybe : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.code (Agda.set univ.0)))).
[A] Agda.Term _ (Maybe A) --> TYPE__Maybe A.
Maybe__nothing : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Maybe A))).
Maybe__just : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (_0 => (Maybe A))))).



TYPE__Stream : (A : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> Type.
Stream : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.code (Agda.set univ.0)))).
[A] Agda.Term _ (Stream A) --> TYPE__Stream A.
{|!Stream__[]|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Stream A))).
{|!Stream___∷_|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream A)) (xs => (Stream A))))))).



def zeros : Agda.Term (Agda.set univ.0) (Stream Agda__Builtin__Nat.Nat).
def {|!___♯-0|} : Agda.Term (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream Agda__Builtin__Nat.Nat)).
[] zeros --> {|!Stream___∷_|} Agda__Builtin__Nat.Nat Agda__Builtin__Nat.Nat__zero {|!___♯-0|}.
 
[] Agda__Builtin__Coinduction.{|!♭|} {univ.0} {Stream Agda__Builtin__Nat.Nat} {|!___♯-0|} --> zeros.
 
def natStream : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) Agda__Builtin__Nat.Nat (_0 => (Stream Agda__Builtin__Nat.Nat))).
def {|!___♯-1|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) Agda__Builtin__Nat.Nat (n => (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream Agda__Builtin__Nat.Nat)))).
[x] natStream x --> {|!Stream___∷_|} Agda__Builtin__Nat.Nat x ({|!___♯-1|} x).
 
[n] Agda__Builtin__Coinduction.{|!♭|} {univ.0} {Stream Agda__Builtin__Nat.Nat} ({|!___♯-1|} n) --> natStream (Agda__Builtin__Nat.Nat__suc n).
 
def nth : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) Agda__Builtin__Nat.Nat (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream A) (_0 => (Maybe A))))))).
[A] nth A Agda__Builtin__Nat.Nat__zero ({|!Stream__[]|} A) --> Maybe__nothing A.
[A, x, xs] nth A Agda__Builtin__Nat.Nat__zero ({|!Stream___∷_|} A x xs) --> Maybe__just A x.
[A, x] nth A (Agda__Builtin__Nat.Nat__suc x) ({|!Stream__[]|} A) --> Maybe__nothing A.
[A, x0, x, xs] nth A (Agda__Builtin__Nat.Nat__suc x0) ({|!Stream___∷_|} A x xs) --> nth A x0 (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) xs).
 
def {|!list-to-stream|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__List.List univ.0 A) (_0 => (Stream A))))).
def {|!___♯-2|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__List.List univ.0 A) (l => (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream A)))))))).
[A] {|!list-to-stream|} A (Agda__Builtin__List.{|!List__[]|} {univ.0} A) --> {|!Stream__[]|} A.
[A, x0, x] {|!list-to-stream|} A (Agda__Builtin__List.{|!List___∷_|} {univ.0} A x0 x) --> {|!Stream___∷_|} A x0 ({|!___♯-2|} A x0 x).
 
[A, x, l] Agda__Builtin__Coinduction.{|!♭|} {univ.0} {Stream A} ({|!___♯-2|} A x l) --> {|!list-to-stream|} A l.
 
def {|!stream-to-list|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) Agda__Builtin__Nat.Nat (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream A) (_0 => (Agda__Builtin__List.List univ.0 A))))))).
[A, x] {|!stream-to-list|} A Agda__Builtin__Nat.Nat__zero x --> Agda__Builtin__List.{|!List__[]|} univ.0 A.
[A, x] {|!stream-to-list|} A (Agda__Builtin__Nat.Nat__suc x) ({|!Stream__[]|} A) --> Agda__Builtin__List.{|!List__[]|} univ.0 A.
[A, x0, x, xs] {|!stream-to-list|} A (Agda__Builtin__Nat.Nat__suc x0) ({|!Stream___∷_|} A x xs) --> Agda__Builtin__List.{|!List___∷_|} univ.0 A x ({|!stream-to-list|} A x0 (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) xs)).
 
def append : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__List.List univ.0 A) (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream A) (_0 => (Stream A))))))).
def {|!___♯-3|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__List.List univ.0 A) (l => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream A) ({|!s|} => (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream A)))))))))).
[A, x] append A (Agda__Builtin__List.{|!List__[]|} {univ.0} A) x --> x.
[A, x1, x0, x] append A (Agda__Builtin__List.{|!List___∷_|} {univ.0} A x1 x0) x --> {|!Stream___∷_|} A x1 ({|!___♯-3|} A x1 x0 x).
 
[A, x, l, {|!s|}] Agda__Builtin__Coinduction.{|!♭|} {univ.0} {Stream A} ({|!___♯-3|} A x l {|!s|}) --> append A l {|!s|}.
 
{|!TYPE___~_|} : (A : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> (_0 : Agda.Term (Agda.set univ.0) (Stream A)) -> (_0 : Agda.Term (Agda.set univ.0) (Stream A)) -> Type.
{|!_~_|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) (Stream A) (_0 => (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) (Stream A) (_0 => (Agda.code (Agda.set univ.0)))))))).
[A, x0, x] Agda.Term _ ({|!_~_|} A x0 x) --> {|!TYPE___~_|} A x0 x.
{|!_~___~-empty|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => ({|!_~_|} A ({|!Stream__[]|} A) ({|!Stream__[]|} A)))).
{|!_~___~-cons|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A ({|!x'|} => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream A)) (l => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream A)) ({|!l'|} => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Equality.{|!_≡_|} univ.0 A x {|!x'|}) (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 ({|!_~_|} A (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) l) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) {|!l'|}))) (_0 => ({|!_~_|} A ({|!Stream___∷_|} A x l) ({|!Stream___∷_|} A {|!x'|} {|!l'|})))))))))))))))).



def {|!~-refl|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream A) (x => ({|!_~_|} A x x))))).
def {|!___♯-4|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream A)) (l => (Agda__Builtin__Coinduction.{|!∞|} univ.0 ({|!_~_|} A (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) l) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) l))))))))).
[A] {|!~-refl|} A ({|!Stream__[]|} A) --> {|!_~___~-empty|} A.
[A, x, xs] {|!~-refl|} A ({|!Stream___∷_|} A x xs) --> {|!_~___~-cons|} A x x xs xs (Agda__Builtin__Equality.{|!_≡___refl|} univ.0 A x) ({|!___♯-4|} A x xs).
 
[A, x, l] Agda__Builtin__Coinduction.{|!♭|} {univ.0} {{|!_~_|} A (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) l) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) l)} ({|!___♯-4|} A x l) --> {|!~-refl|} A (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) l).
 
def {|!~-sym|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream A) (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream A) (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) ({|!_~_|} A x y) (_0 => ({|!_~_|} A y x))))))))).
def {|!___♯-5|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream A)) (l => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A ({|!x'|} => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream A)) ({|!l'|} => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Equality.{|!_≡_|} univ.0 A x {|!x'|}) (p => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 ({|!_~_|} A (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) l) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) {|!l'|}))) (q => (Agda__Builtin__Coinduction.{|!∞|} univ.0 ({|!_~_|} A (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) {|!l'|}) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) l))))))))))))))))).
[A] {|!~-sym|} A {{|!Stream__[]|} A} {{|!Stream__[]|} A} ({|!_~___~-empty|} A) --> {|!_~___~-empty|} A.
[A, x1, {|!x'|}, l, {|!l'|}, x0, x] {|!~-sym|} A ({|!Stream___∷_|} A x1 l) ({|!Stream___∷_|} A {|!x'|} {|!l'|}) ({|!_~___~-cons|} A x1 {|!x'|} l {|!l'|} x0 x) --> {|!_~___~-cons|} A {|!x'|} x1 {|!l'|} l (eqaux.sym A x1 {|!x'|} x0) ({|!___♯-5|} A x1 l {|!x'|} {|!l'|} x0 x).
 
[A, x, l, {|!x'|}, {|!l'|}, p, q] Agda__Builtin__Coinduction.{|!♭|} {univ.0} {{|!_~_|} A (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) {|!l'|}) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) l)} ({|!___♯-5|} A x l {|!x'|} {|!l'|} p q) --> {|!~-sym|} A (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) l) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) {|!l'|}) (Agda__Builtin__Coinduction.{|!♭|} univ.0 ({|!_~_|} A (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) l) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) {|!l'|})) q).
 
def {|!~-trans|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream A) (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream A) (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream A) ({|!z|} => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) ({|!_~_|} A x y) (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) ({|!_~_|} A y {|!z|}) (_0 => ({|!_~_|} A x {|!z|}))))))))))))).
def {|!___♯-6|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream A)) (l => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A ({|!x'|} => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream A)) ({|!l'|} => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A ({|!x''|} => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream A)) ({|!l''|} => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Equality.{|!_≡_|} univ.0 A x {|!x'|}) (p => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 ({|!_~_|} A (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) l) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) {|!l'|}))) (q => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Equality.{|!_≡_|} univ.0 A {|!x'|} {|!x''|}) ({|!p'|} => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 ({|!_~_|} A (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) {|!l'|}) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) {|!l''|}))) ({|!q'|} => (Agda__Builtin__Coinduction.{|!∞|} univ.0 ({|!_~_|} A (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) l) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) {|!l''|}))))))))))))))))))))))))).
[A] {|!~-trans|} A {{|!Stream__[]|} A} {{|!Stream__[]|} A} {{|!Stream__[]|} A} ({|!_~___~-empty|} A) ({|!_~___~-empty|} A) --> {|!_~___~-empty|} A.
[A, x4, xs, x3, {|!x'|}, l, {|!l'|}, x2, x1, x0, x] {|!~-trans|} A ({|!Stream___∷_|} A x3 l) ({|!Stream___∷_|} A {|!x'|} {|!l'|}) ({|!Stream___∷_|} A x4 xs) ({|!_~___~-cons|} A x3 {|!x'|} l {|!l'|} x2 x1) ({|!_~___~-cons|} A {|!x'|} x4 {|!l'|} xs x0 x) --> {|!_~___~-cons|} A x3 x4 l xs (eqaux.trans A x3 {|!x'|} x4 x2 x0) ({|!___♯-6|} A x3 l {|!x'|} {|!l'|} x4 xs x2 x1 x0 x).
 
[A, x, l, {|!x'|}, {|!l'|}, {|!x''|}, {|!l''|}, p, q, {|!p'|}, {|!q'|}] Agda__Builtin__Coinduction.{|!♭|} {univ.0} {{|!_~_|} A (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) l) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) {|!l''|})} ({|!___♯-6|} A x l {|!x'|} {|!l'|} {|!x''|} {|!l''|} p q {|!p'|} {|!q'|}) --> {|!~-trans|} A (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) l) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) {|!l'|}) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) {|!l''|}) (Agda__Builtin__Coinduction.{|!♭|} univ.0 ({|!_~_|} A (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) l) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) {|!l'|})) q) (Agda__Builtin__Coinduction.{|!♭|} univ.0 ({|!_~_|} A (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) {|!l'|}) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) {|!l''|})) {|!q'|}).
 
def {|!_⊕_|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream Agda__Builtin__Nat.Nat) (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream Agda__Builtin__Nat.Nat) (_0 => (Stream Agda__Builtin__Nat.Nat))))).
def {|!___♯-7|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) Agda__Builtin__Nat.Nat (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream Agda__Builtin__Nat.Nat)) (l => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) Agda__Builtin__Nat.Nat ({|!x'|} => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream Agda__Builtin__Nat.Nat)) ({|!l'|} => (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream Agda__Builtin__Nat.Nat)))))))))).
[x] {|!_⊕_|} ({|!Stream__[]|} {Agda__Builtin__Nat.Nat}) x --> {|!Stream__[]|} Agda__Builtin__Nat.Nat.
[x, xs] {|!_⊕_|} ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x xs) ({|!Stream__[]|} {Agda__Builtin__Nat.Nat}) --> {|!Stream__[]|} Agda__Builtin__Nat.Nat.
[x0, xs0, x, xs] {|!_⊕_|} ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x0 xs0) ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x xs) --> {|!Stream___∷_|} Agda__Builtin__Nat.Nat (Agda__Builtin__Nat.{|!_+_|} x0 x) ({|!___♯-7|} x0 xs0 x xs).
 
[x, l, {|!x'|}, {|!l'|}] Agda__Builtin__Coinduction.{|!♭|} {univ.0} {Stream Agda__Builtin__Nat.Nat} ({|!___♯-7|} x l {|!x'|} {|!l'|}) --> {|!_⊕_|} (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) {|!l'|}).
 
def {|!⊕-trans|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream Agda__Builtin__Nat.Nat) (l1 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream Agda__Builtin__Nat.Nat) (l2 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream Agda__Builtin__Nat.Nat) (l3 => ({|!_~_|} Agda__Builtin__Nat.Nat ({|!_⊕_|} ({|!_⊕_|} l1 l2) l3) ({|!_⊕_|} l1 ({|!_⊕_|} l2 l3))))))))).
def {|!___♯-8|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) Agda__Builtin__Nat.Nat (x1 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream Agda__Builtin__Nat.Nat)) (l1 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) Agda__Builtin__Nat.Nat (x2 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream Agda__Builtin__Nat.Nat)) (l2 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) Agda__Builtin__Nat.Nat (x3 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream Agda__Builtin__Nat.Nat)) (l3 => (Agda__Builtin__Coinduction.{|!∞|} univ.0 ({|!_~_|} Agda__Builtin__Nat.Nat ({|!_⊕_|} ({|!_⊕_|} (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l1) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l2)) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l3)) ({|!_⊕_|} (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l1) ({|!_⊕_|} (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l2) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l3))))))))))))))))).
[l2, l3] {|!⊕-trans|} ({|!Stream__[]|} {Agda__Builtin__Nat.Nat}) l2 l3 --> {|!_~___~-empty|} Agda__Builtin__Nat.Nat.
[x, xs, l3] {|!⊕-trans|} ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x xs) ({|!Stream__[]|} {Agda__Builtin__Nat.Nat}) l3 --> {|!_~___~-empty|} Agda__Builtin__Nat.Nat.
[x0, xs0, x, xs] {|!⊕-trans|} ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x0 xs0) ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x xs) ({|!Stream__[]|} {Agda__Builtin__Nat.Nat}) --> {|!_~___~-empty|} Agda__Builtin__Nat.Nat.
[x1, xs1, x0, xs0, x, xs] {|!⊕-trans|} ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x1 xs1) ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x0 xs0) ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x xs) --> {|!_~___~-cons|} Agda__Builtin__Nat.Nat (Agda__Builtin__Nat.{|!_+_|} (Agda__Builtin__Nat.{|!_+_|} x1 x0) x) (Agda__Builtin__Nat.{|!_+_|} x1 (Agda__Builtin__Nat.{|!_+_|} x0 x)) ({|!___♯-7|} (Agda__Builtin__Nat.{|!_+_|} x1 x0) ({|!___♯-7|} x1 xs1 x0 xs0) x xs) ({|!___♯-7|} x1 xs1 (Agda__Builtin__Nat.{|!_+_|} x0 x) ({|!___♯-7|} x0 xs0 x xs)) (nataux.{|!+-assoc|} x1 x0 x) ({|!___♯-8|} x1 xs1 x0 xs0 x xs).
 
[x1, l1, x2, l2, x3, l3] Agda__Builtin__Coinduction.{|!♭|} {univ.0} {{|!_~_|} Agda__Builtin__Nat.Nat ({|!_⊕_|} ({|!_⊕_|} (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l1) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l2)) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l3)) ({|!_⊕_|} (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l1) ({|!_⊕_|} (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l2) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l3)))} ({|!___♯-8|} x1 l1 x2 l2 x3 l3) --> {|!⊕-trans|} (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l1) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l2) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l3).
 
def {|!⊕-com|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream Agda__Builtin__Nat.Nat) (l => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream Agda__Builtin__Nat.Nat) (k => ({|!_~_|} Agda__Builtin__Nat.Nat ({|!_⊕_|} l k) ({|!_⊕_|} k l)))))).
def {|!___♯-9|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) Agda__Builtin__Nat.Nat (x1 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream Agda__Builtin__Nat.Nat)) (l1 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) Agda__Builtin__Nat.Nat (x2 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream Agda__Builtin__Nat.Nat)) (l2 => (Agda__Builtin__Coinduction.{|!∞|} univ.0 ({|!_~_|} Agda__Builtin__Nat.Nat ({|!_⊕_|} (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l1) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l2)) ({|!_⊕_|} (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l2) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l1)))))))))))).
[] {|!⊕-com|} ({|!Stream__[]|} {Agda__Builtin__Nat.Nat}) ({|!Stream__[]|} {Agda__Builtin__Nat.Nat}) --> {|!_~___~-empty|} Agda__Builtin__Nat.Nat.
[x, xs] {|!⊕-com|} ({|!Stream__[]|} {Agda__Builtin__Nat.Nat}) ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x xs) --> {|!_~___~-empty|} Agda__Builtin__Nat.Nat.
[x, xs] {|!⊕-com|} ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x xs) ({|!Stream__[]|} {Agda__Builtin__Nat.Nat}) --> {|!_~___~-empty|} Agda__Builtin__Nat.Nat.
[x0, xs0, x, xs] {|!⊕-com|} ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x0 xs0) ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x xs) --> {|!_~___~-cons|} Agda__Builtin__Nat.Nat (Agda__Builtin__Nat.{|!_+_|} x0 x) (Agda__Builtin__Nat.{|!_+_|} x x0) ({|!___♯-7|} x0 xs0 x xs) ({|!___♯-7|} x xs x0 xs0) (nataux.{|!+-com|} x0 x) ({|!___♯-9|} x0 xs0 x xs).
 
[x1, l1, x2, l2] Agda__Builtin__Coinduction.{|!♭|} {univ.0} {{|!_~_|} Agda__Builtin__Nat.Nat ({|!_⊕_|} (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l1) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l2)) ({|!_⊕_|} (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l2) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l1))} ({|!___♯-9|} x1 l1 x2 l2) --> {|!⊕-com|} (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l1) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l2).
 
def {|!0-⊕|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream Agda__Builtin__Nat.Nat) (l => ({|!_~_|} Agda__Builtin__Nat.Nat ({|!_⊕_|} zeros l) l))).
def {|!___♯-10|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) Agda__Builtin__Nat.Nat (n => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream Agda__Builtin__Nat.Nat)) (l => (Agda__Builtin__Coinduction.{|!∞|} univ.0 ({|!_~_|} Agda__Builtin__Nat.Nat ({|!_⊕_|} zeros (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l)) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l))))))).
[] {|!0-⊕|} ({|!Stream__[]|} {Agda__Builtin__Nat.Nat}) --> {|!_~___~-empty|} Agda__Builtin__Nat.Nat.
[x, xs] {|!0-⊕|} ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x xs) --> {|!_~___~-cons|} Agda__Builtin__Nat.Nat (Agda__Builtin__Nat.{|!_+_|} Agda__Builtin__Nat.Nat__zero x) x ({|!___♯-7|} Agda__Builtin__Nat.Nat__zero {|!___♯-0|} x xs) xs (Agda__Builtin__Equality.{|!_≡___refl|} univ.0 Agda__Builtin__Nat.Nat (Agda__Builtin__Nat.{|!_+_|} Agda__Builtin__Nat.Nat__zero x)) ({|!___♯-10|} x xs).
 
[n, l] Agda__Builtin__Coinduction.{|!♭|} {univ.0} {{|!_~_|} Agda__Builtin__Nat.Nat ({|!_⊕_|} ({|!Stream___∷_|} Agda__Builtin__Nat.Nat Agda__Builtin__Nat.Nat__zero {|!___♯-0|}) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l)) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l)} ({|!___♯-10|} n l) --> {|!0-⊕|} (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) l).
 
